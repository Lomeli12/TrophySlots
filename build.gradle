buildscript {
    ext.kotlin_version = '0.14.449'
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.0-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'

def loadProperties(String sourceFileName) {
    def config = new Properties()
        def propFile = new File(sourceFileName)
            if (propFile.canRead()) {
                config.load(new FileInputStream(propFile))
                    for (Map.Entry property in config) {
                        ext[property.key] = property.value;
                    }
            }
}

loadProperties 'build.properties'

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    shade "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    shade "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
}

group = "$modGroup"
archivesBaseName = "$modName"
version = "$releaseVersion"

minecraft {
    version = "$mcVersion-$mcfVersion" // grab latest forge
    runDir = "run"
    mappings = "$mcpMap"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "kotlinversion", "$kotlinVersion"

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include 'dependencies.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version, 'kotlinversion':"$kotlinVersion"
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'dependencies.info'
    }
}

jar {
	appendix = "$mcVersion"
    classifier = "universal"
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
    manifest {
        attributes("FMLAT" : "trophyslots_at.cfg")
    }
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}