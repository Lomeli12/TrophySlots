buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.0-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:0.14.449"
    }
}

def loadProperties(String sourceFileName) {
    def config = new Properties()
        def propFile = new File(sourceFileName)
            if (propFile.canRead()) {
                config.load(new FileInputStream(propFile))
                    for (Map.Entry property in config) {
                        ext[property.key] = property.value;
                    }
            }
}

loadProperties 'build.properties'

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'

/* Waiting for pull #268 of ForgeGradle to be pulled https://github.com/MinecraftForge/ForgeGradle/pull/268
configurations {
    shade
    compile.extendsFrom shade
}
*/

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
}

group = "$modGroup"
archivesBaseName = "$modName"
version = "$releaseVersion"

minecraft {
    version = "$mcVersion-$mcfVersion" // grab latest forge
    runDir = "run"
    mappings = "$mcpMap"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    // Shading
    /* Waiting for pull #268 of ForgeGradle to be pulled https://github.com/MinecraftForge/ForgeGradle/pull/268
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
    */
	appendix = "$mcVersion"
    classifier = "universal"
    manifest {
        attributes("FMLCorePlugin": "net.lomeli.trophyslots.repack.codechicken.core.launch.DepLoader", "FMLCorePluginContainsFMLMod": "true", "FMLAT" : "trophyslots_at.cfg")
    }
}

// Waiting for pull #268 of ForgeGradle to be pulled https://github.com/MinecraftForge/ForgeGradle/pull/268
// reobf.jar.srgExtra 'PK: kotlin net/lomeli/trophyslots/repack/kotlin'